{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Introduction","text":"<p>The SparkFun 6DoF - LSM6DSV16X (Qwiic) is a Qwiic enabled board based on the LSM6DSV16X from STMicroelectronics. This little chip is a high-performance, low-power 6-axis IMU, featuring a 3-axis digital accelerometer and a 3-axis digital gyroscope, with a triple core for processing acceleration and angular rate data on three separate channels (user interface, OIS, and EIS) with dedicated configuration, processing, and filtering. </p> <p> Purchase from SparkFun  </p> <p></p> <p>The SparkFun 6DoF Micro- LSM6DSV16X (Qwiic) is the 1x1's mini-me, containing most of it's elder sibling's functionality in a tiny little package. </p> <p> Purchase from SparkFun  </p>"},{"location":"#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> SparkFun 6DoF - LSM6DSV16X (Qwiic)SEN-21325 SparkFun 6DoF Micro- LSM6DSV16X (Qwiic) SEN-21336 SparkFun RedBoard Qwiic DEV-14743 Qwiic Cable - 100mm PRT-14427 USB 3.1 Cable A to C - 3 Foot CAB-14743"},{"location":"#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we recommend checking out these tutorials before continuing.</p> Qwiic Connect System Accelerometer Basics I2C"},{"location":"contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun 6DoF - LSM6DSV16X (Qwiic) repository.</li> </ul>"},{"location":"contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li> <p>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun 6DoF - LSM6DSV16X (Qwiic) repository.</p> </li> <li> <p>With a GitHub account, fork this repository.</p> </li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ul>"},{"location":"contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#example-1-basic-readings","title":"Example 1: Basic Readings","text":"<p>This first example just does some basic measurements. To find Example 1, go to File &gt; Examples &gt; SparkFun 6DoF LSM6DSV16X &gt; example1_basic:</p> <p></p> <p>Finding Example 1</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 1 Arduino Code <pre><code>/*\n  example1-basic\n\n  This example shows the basic settings and functions for retrieving accelerometer\n    and gyroscopic data.\n\n  Written by Elias Santistevan @ SparkFun Electronics, May, 2022\n\n    Products:\n\n    SparkFun 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21325\n\n    SparkFun Micro 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21336\n\n  Repository:\n        https://github.com/sparkfun/SparkFun_LSM6DSV16X_Arduino_Library\n\n  SparkFun code, firmware, and software is released under the MIT\n    License (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_LSM6DSV16X.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_LSM6DSV16X myLSM;\n\n// Structs for X,Y,Z data\nsfe_lsm_data_t accelData;\nsfe_lsm_data_t gyroData;\n\nvoid setup()\n{\n\n    Wire.begin();\n\n    Serial.begin(115200);\n    while (!Serial)\n    {\n    }\n\n    Serial.println(\"LSM6DSV16X Example 1 - Basic Readings I2C\");\n\n    if (!myLSM.begin())\n    {\n        Serial.println(\"Did not begin, check your wiring and/or I2C address!\");\n        while (1)\n            ;\n    }\n\n    // Reset the device to default settings. This if helpful is you're doing multiple\n    // uploads testing different settings.\n    myLSM.deviceReset();\n\n    // Wait for it to finish reseting\n    while (!myLSM.getDeviceReset())\n    {\n        delay(1);\n    }\n\n    Serial.println(\"Board has been Reset.\");\n    Serial.println(\"Applying settings.\");\n\n    // Accelerometer and Gyroscope registers will not be updated\n    // until read.\n    myLSM.enableBlockDataUpdate();\n\n    // Set the output data rate and precision of the accelerometer\n    myLSM.setAccelDataRate(LSM6DSV16X_ODR_AT_7Hz5);\n    myLSM.setAccelFullScale(LSM6DSV16X_16g);\n\n    // Set the output data rate and precision of the gyroscope\n    myLSM.setGyroDataRate(LSM6DSV16X_ODR_AT_15Hz);\n    myLSM.setGyroFullScale(LSM6DSV16X_2000dps);\n\n    // Enable filter settling.\n    myLSM.enableFilterSettling();\n\n    // Turn on the accelerometer's filter and apply settings.\n    myLSM.enableAccelLP2Filter();\n    myLSM.setAccelLP2Bandwidth(LSM6DSV16X_XL_STRONG);\n\n    // Turn on the gyroscope's filter and apply settings.\n    myLSM.enableGyroLP1Filter();\n    myLSM.setGyroLP1Bandwidth(LSM6DSV16X_GY_ULTRA_LIGHT);\n\n    Serial.println(\"Ready.\");\n}\n\nvoid loop()\n{\n\n    // Check if both gyroscope and accelerometer data is available.\n    if (myLSM.checkStatus())\n    {\n        myLSM.getAccel(&amp;accelData);\n        myLSM.getGyro(&amp;gyroData);\n        Serial.print(\"Accelerometer: \");\n        Serial.print(\"X: \");\n        Serial.print(accelData.xData);\n        Serial.print(\" \");\n        Serial.print(\"Y: \");\n        Serial.print(accelData.yData);\n        Serial.print(\" \");\n        Serial.print(\"Z: \");\n        Serial.print(accelData.zData);\n        Serial.println(\" \");\n        Serial.print(\"Gyroscope: \");\n        Serial.print(\"X: \");\n        Serial.print(gyroData.xData);\n        Serial.print(\" \");\n        Serial.print(\"Y: \");\n        Serial.print(gyroData.yData);\n        Serial.print(\" \");\n        Serial.print(\"Z: \");\n        Serial.print(gyroData.zData);\n        Serial.println(\" \");\n    }\n\n    delay(100);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following. Note the obvious changes where the sensor was turned upright. </p> <p></p> <p>Example 1 Output</p>"},{"location":"examples/#example-2-interrupt","title":"Example 2: Interrupt","text":"<p>This example shows the basic settings and functions for retrieving accelerometer data. In addition we're setting the data ready signal to interrupt pin one in an active high configuration and show additional ways in which the interrupts can be configured. To find Example 2, go to File &gt; Examples &gt; SparkFun 6DoF LSM6DSV16X &gt; example2_interrupt. </p> <p></p> <p>Finding Example 2</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 2 Arduino Code <pre><code>/*\n  example2-interrupt\n\n  This example shows the basic settings and functions for retrieving accelerometer\n    data. In addition we're setting the data ready signal to interrupt pin one in an\n    active high configuration and show additional ways in which the interrupts\n    can be configured.\n\n  Written by Elias Santistevan @ SparkFun Electronics, May 2022\n\n    Products:\n\n    SparkFun 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21325\n\n    SparkFun Micro 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21336\n\n  Repository:\n        https://github.com/sparkfun/SparkFun_LSM6DSV16X_Arduino_Library\n\n  SparkFun code, firmware, and software is released under the MIT\n    License (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_LSM6DSV16X.h\"\n#include &lt;Wire.h&gt;\n\n// Structs for X,Y,Z data\nSparkFun_LSM6DSV16X myLSM;\n\n// Structs for X,Y,Z data\nsfe_lsm_data_t accelData;\n\n// Interrupt pin\nbyte interrupt_pin = 10;\n\nvoid setup()\n{\n\n    // Set the interrupt to INPUT\n    pinMode(interrupt_pin, INPUT);\n\n    Serial.begin(115200);\n    while (!Serial)\n    {\n    }\n\n    Serial.println(\"LSM6DSV16X Example 2 - Interrupts\");\n\n    Wire.begin();\n\n    if (!myLSM.begin())\n    {\n        Serial.println(\"Did not begin, check your wiring and/or I2C address!\");\n        while (1)\n            ;\n    }\n\n    // Reset the device to default settings. This is helpful if you're doing multiple\n    // uploads testing different settings.\n    myLSM.deviceReset();\n\n    // Wait for it to finish reseting\n    while (!myLSM.getDeviceReset())\n    {\n        delay(1);\n    }\n\n    Serial.println(\"Board has been Reset.\");\n    Serial.println(\"Applying settings.\");\n\n    // Accelerometer and Gyroscope registers will not be updated\n    // until read.\n    myLSM.enableBlockDataUpdate();\n\n    // Set the output data rate and precision of the accelerometer\n    myLSM.setAccelDataRate(LSM6DSV16X_ODR_AT_7Hz5);\n    myLSM.setAccelFullScale(LSM6DSV16X_16g);\n\n    // Turn on the accelerometer's filter and apply settings.\n    myLSM.enableAccelLP2Filter();\n    myLSM.setAccelLP2Bandwidth(LSM6DSV16X_XL_STRONG);\n\n    // Set the accelerometer's status i.e. the data ready to interrupt one.\n    // Commented out just below is the function to send the data ready\n    // to interrupt two.\n\n    myLSM.setIntAccelDataReady(LSM_PIN_ONE);\n    // myLSM.setIntAccelDataReady(LSM_PIN_TWO);\n\n    // We can just as easily set the gyroscope's data read signal to either interrupt\n\n    // myLSM.setIntGyroDataReady(LSM_PIN_ONE);\n    // myLSM.setIntGyroDataReady(LSM_PIN_TWO);\n\n    // Uncommenting the function call below will change interrupt TWO\n    // active LOW instead of HIGH.\n\n    // myLSM.setInt2DENActiveLow();\n\n    // This function call will modify which \"events\" trigger an interrupt. No\n    // argument has been given, please refer to the datasheet for more\n    // information.\n\n    // Possible values for routing your interrupt include:\n    // lsm6dsv16x_pin_int_route_t routeInt;\n    // routeInt.drdy_xl = 1;\n    // routeInt.drdy_g = 1;\n    // routeInt.drdy_g = 1;\n    // routeInt.single_tap = 1;\n    // routeInt.double_tap = 1;\n    // myLSM.setIntRoute(routeInt, LSM_PIN_ONE);\n\n    // This function changes the latching behaviour of the interrupts to pulsed.\n    // lsm6dsv16x_data_ready_mode_t mode = LSM6DSV16X_DRDY_PULSED;\n    // myLSM.setDataReadyMode();\n\n    Serial.println(\"Ready.\");\n}\n\nvoid loop()\n{\n\n    if (digitalRead(interrupt_pin) == HIGH)\n    {\n        myLSM.getAccel(&amp;accelData);\n        Serial.print(\"Accelerometer: \");\n        Serial.print(\"X: \");\n        Serial.print(accelData.xData);\n        Serial.print(\" \");\n        Serial.print(\"Y: \");\n        Serial.print(accelData.yData);\n        Serial.print(\" \");\n        Serial.print(\"Z: \");\n        Serial.print(accelData.zData);\n        Serial.println(\" \");\n    }\n\n    delay(100);\n}\n</code></pre> <p>Your setup should resemble something like this: </p> <p></p> <p>Example 2</p> <p>Make sure your code matches the pin you've selected as the interrupt pin. Here Pin 2 is wired as the interrupt pin on the RedBoard, so the code was modified to reflect that. Again, make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following.</p> <p></p> <p>Example 2 Output</p>"},{"location":"examples/#example-3-spi","title":"Example 3: SPI","text":"<p>This example shows the basic settings and functions for retrieving accelerometer and gyroscopic data but using the SPI interface. Everything other than that is identical to the \"basic\" example. To find Example 3, go to File &gt; Examples &gt; SparkFun 6DoF LSM6DSV16X &gt; example3_spi:</p> <p></p> <p>Finding Example 3</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 3 Arduino Code <pre><code>/*\n  example3-spi\n\n  This example shows the basic settings and functions for retrieving accelerometer\n    and gyroscopic data but using the SPI interface. Everything other than that is\n    identical to the \"basic\" example.\n\n  Written by Elias Santistevan @ SparkFun Electronics, May 2022\n\n    Products:\n\n    SparkFun 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21325\n\n    SparkFun Micro 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21336\n\n  Repository:\n        https://github.com/sparkfun/SparkFun_LSM6DSV16X_Arduino_Library\n\n  SparkFun code, firmware, and software is released under the MIT\n    License (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_LSM6DSV16X.h\"\n#include &lt;SPI.h&gt;\n\n// SPI instance class call\nSparkFun_LSM6DSV16X_SPI myLSM;\n\n// Structs for X,Y,Z data\nsfe_lsm_data_t accelData;\nsfe_lsm_data_t gyroData;\n\n// Set your chip select pin according to your setup.\nint chipSelect = 10;\n\nvoid setup()\n{\n\n    SPI.begin();\n\n    Serial.begin(115200);\n    while (!Serial)\n    {\n    }\n\n    Serial.println(\"LSM6DSV16X Example 3 - Basic Readings SPI\");\n\n    pinMode(chipSelect, OUTPUT);\n    digitalWrite(chipSelect, HIGH);\n\n    if (!myLSM.begin(chipSelect))\n    {\n        Serial.println(\"Did not begin, check your wiring and/or I2C address!\");\n        while (1)\n            ;\n    }\n\n    // Reset the device to default settings. This if helpful is you're doing multiple\n    // uploads testing different settings.\n    myLSM.deviceReset();\n\n    // Wait for it to finish reseting\n    while (!myLSM.getDeviceReset())\n    {\n        delay(1);\n    }\n\n    Serial.println(\"Board has been Reset.\");\n    Serial.println(\"Applying settings.\");\n\n    // Accelerometer and Gyroscope registers will not be updated\n    // until read.\n    myLSM.enableBlockDataUpdate();\n\n    // Set the output data rate and precision of the accelerometer\n    myLSM.setAccelDataRate(LSM6DSV16X_ODR_AT_7Hz5);\n    myLSM.setAccelFullScale(LSM6DSV16X_16g);\n\n    // Set the output data rate and precision of the gyroscope\n    myLSM.setGyroDataRate(LSM6DSV16X_ODR_AT_15Hz);\n    myLSM.setGyroFullScale(LSM6DSV16X_2000dps);\n\n    // Enable filter settling.\n    myLSM.enableFilterSettling();\n\n    // Turn on the accelerometer's filter and apply settings.\n    myLSM.enableAccelLP2Filter();\n    myLSM.setAccelLP2Bandwidth(LSM6DSV16X_XL_STRONG);\n\n    // Turn on the gyroscope's filter and apply settings.\n    myLSM.enableGyroLP1Filter();\n    myLSM.setGyroLP1Bandwidth(LSM6DSV16X_GY_ULTRA_LIGHT);\n\n    Serial.print(\"Ready.\");\n}\n\nvoid loop()\n{\n\n    // Check if both gyroscope and accelerometer data is available.\n    if (myLSM.checkStatus())\n    {\n        myLSM.getAccel(&amp;accelData);\n        myLSM.getGyro(&amp;gyroData);\n        Serial.print(\"Accelerometer: \");\n        Serial.print(\"X: \");\n        Serial.print(accelData.xData);\n        Serial.print(\" \");\n        Serial.print(\"Y: \");\n        Serial.print(accelData.yData);\n        Serial.print(\" \");\n        Serial.print(\"Z: \");\n        Serial.print(accelData.zData);\n        Serial.println(\" \");\n        Serial.print(\"Gyroscope: \");\n        Serial.print(\"X: \");\n        Serial.print(gyroData.xData);\n        Serial.print(\" \");\n        Serial.print(\"Y: \");\n        Serial.print(gyroData.yData);\n        Serial.print(\" \");\n        Serial.print(\"Z: \");\n        Serial.print(gyroData.zData);\n        Serial.println(\" \");\n    }\n\n    delay(100);\n}\n</code></pre> <p>The wiring for this example is fairly straight forward, if somewhat ugly. Here's what it looks like:</p> <p></p> <p>Example 3</p> <p>And here are the connections:  Pin Connections Qwiic Breakout Pin RedBoard Pin PICO 11 POCI 12 SCLK 13 CS A4 <p></p> <p>Once you get the correct port and board selected and the code is uploaded, you should see something like the following: </p> <p></p> <p>Example 3 Output</p> <p>Attention</p> <p>If you are using the SparkFun RedBoard Qwiic and your output only says \"Reset. Applying Settings.\" with no other output, make sure that you have your I/O jumper set correctly. You'll find the 3V3 vs 5V jumper on the front of the RedBoard Qwiic. You'll need to cut the connective trace to 5V and solder the center jumper pad to the 3V3 pad. More information can be found in the RedBoard Qwiic Hookup Guide. </p> <p> 3V3/5V Jumper on the RedBoard </p>"},{"location":"examples/#further-examples","title":"Further Examples","text":"<p>There are a few more examples in the library that get you started with I<sup>2</sup>C speeds, Qvar, and single/double tap. Feel free to explore and play with these examples to maximize your use of the SparkFun 6DoF - LSM6DSV16X (Qwiic) or  SparkFun Micro 6DoF - LSM6DSV16X (Qwiic)!</p>"},{"location":"file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun 6DoF - LSM6DSV16X (Qwiic) repository.</li> </ul>"},{"location":"file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun 6DoF - LSM6DSV16X (Qwiic) repository. </li> </ul>"},{"location":"file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":"<p>The delightful thing about our Qwiic boards is that they are quite literally plug and play. </p> <p></p> <p>SparkFun 6DoF - LSM6DSV16X (Qwiic) Plugged into the RedBoard Qwiic</p> <p></p> <p>SparkFun 6DoF Micro - LSM6DSV16X (Qwiic)  Plugged into the RedBoard Qwiic</p> <p>Attention</p> <p>If you are using the SparkFun RedBoard Qwiic, make sure that you have your I/O jumper set correctly. You'll find the 3V3 vs 5V jumper on the front of the RedBoard Qwiic. You'll need to cut the connective trace to 5V and solder the center jumper pad to the 3V3 pad in order for the examples to work. More information can be found in the RedBoard Qwiic Hookup Guide. </p> <p> 3V3/5V Jumper on the RedBoard </p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#accelerometer-lsm6dsv16x","title":"Accelerometer - LSM6DSV16X","text":"<p>The LSM6DSV16X Accelerometer from STMicroelectronics has a few different modes: </p> <ul> <li>Mode 1: Periperhal only mode - I<sup>2</sup>C or SPI</li> <li>Mode 2: Sensor hub mode - I<sup>2</sup>C or SPI with controller I2C port</li> <li>Mode 3 and 4: AUX SPI mode I<sup>2</sup>C and SPI access multi-read</li> </ul> <p></p> <p></p>"},{"location":"hardware_overview/#mode-1","title":"Mode 1","text":"<p>This is the default \"peripheral only\" mode. This mode allows you to use either I<sup>2</sup>C or SPI. By default, I<sup>2</sup>C is enabled with an address of 0x6B. By manipulating the associated jumper, you can change the I<sup>2</sup>C address to 0x6A (cut the power side and close the ground side) or switch to SPI mode (both jumpers open).</p>"},{"location":"hardware_overview/#mode-2","title":"Mode 2","text":"<p>This mode enables a secondary I<sup>2</sup>C port that the 6DoF controls; up to 4 external sensors can be connected to the I<sup>2</sup>C controller interface of the device. External sensors communicate via the SCX and SDX (PICOX) lines - the SCX and SDX jumpers will need to be opened.</p>"},{"location":"hardware_overview/#modes-3-4","title":"Modes 3 &amp; 4","text":"<p>In addition to the primary I<sup>2</sup>C peripheral interface or SPI (3- / 4-wire) serial interface, an auxiliary SPI (3- / 4-wire) serial interface is available for external device connections (i.e. camera module). Mode 3 is available for gyroscope only, Mode 4 is available for both gyroscope and accelerometer.</p> <p>The analog hub and Qvar functionalities are available in mode 1 with I\u00b2C interface only.</p>"},{"location":"hardware_overview/#qwiic-connector","title":"Qwiic Connector","text":"<p>The Qwiic connector(s) on the SparkFun 6DoF - LSM6DSV16X (Qwiic) and SparkFun 6DoF Micro - LSM6DSV16X (Qwiic) provide power and I<sup>2</sup>C connectivity simultaneously.</p> <p></p> <p></p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>Ideally, power to these boards will be provided by the Qwiic cables. However, should you wish to provide power separately, the 1\" x 1\" board has its pins broken out to PTH and you can wire up power via these. </p> <p>Warning</p> <p><p>Make sure to pay attention to logic levels - supply voltage range should be between 1.71V - 3.6V. </p></p> <p></p> <p>LSM6DSV16X Power Pins</p>"},{"location":"hardware_overview/#gpio","title":"GPIO","text":"<p>This is a quick overview of the pin functionality. For more information, refer to the datasheet. </p>"},{"location":"hardware_overview/#i2c","title":"I<sup>2</sup>C","text":"<p>If you do not want to use the Qwiic connectors, I<sup>2</sup>C functionality has been broken out to PTH pins on the 1x1\" board. </p> <p></p> <p>LSM6DSV16X I2C Pins</p>"},{"location":"hardware_overview/#spi","title":"SPI","text":"<p>Primary SPI functionality has been broken out to the highlighted pins below. </p> <p></p> <p>LSM6DSV16X SPI Pins</p> <p>Auxiliary SPI is available via AH1, AH2, and OCS. </p> <p></p> <p>LSM6DSV16X Aux SPI Pins</p>"},{"location":"hardware_overview/#ah1ah2","title":"AH1/AH2","text":"<p>The LSM6DSV16X embeds Qvar functionality, which is an electrostatic sensor able to measure the variation of the quasi-electrostatic potential. The Qvar sensing channel can be used for user interface applications like tap, double tap, triple tap, long press, and L/R \u2013 R/L swipe. Functionality is accessed via the AH1 and AH2 pins. For more information, refer to STMicroelectronics' Qvar Sensing Channel Application Notes. </p> <p></p> <p>LSM6DSV16X Qvar Pins</p>"},{"location":"hardware_overview/#interrupt-pins","title":"Interrupt Pins","text":"<p>Interrupt functionality is available via the INT pins. There are two interrupts available on the 1x1\" board, and 1 interrupt available on the Micro. These pins are configurable to be high or low. </p> <p></p> <p></p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":""},{"location":"hardware_overview/#i2c_1","title":"I2C","text":"<p>Like our other Qwiic boards, the Qwiic 6DoF - LSM6DSV16X boards come equipped with pull-up resistors on the clock and data pins. If you are daisy-chaining multiple Qwiic devices, you will want to cut this jumper; if multiple sensors are connected to the bus with the pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus. To disable the pull up resistors, use an X-acto knife to cut the joint between the two jumper pads highlighted below.</p> <p></p> <p></p>"},{"location":"hardware_overview/#i2c-address","title":"I<sup>2</sup>C Address","text":"<p>The SparkFun 6DoF - LSM6DSV16X (Qwiic) boards have a default I<sup>2</sup>C address of 0x6B, but by cutting the address jumper on the back of the board, you can select 0x6A (GND) or SPI (fully open). </p> <p></p> <p></p>"},{"location":"hardware_overview/#sdxscx","title":"SDX/SCX","text":"<p>If using either Mode 2 (sensor hub mode) or the analog capabilities of the sensor, cut both of these traces. </p> <p></p> <p>LSM6DSV16X SCX/SDX Jumpers</p>"},{"location":"hardware_overview/#pad-jumpers","title":"Pad Jumpers","text":"<p>When using the Analog In (QVar) functionality, you can select whether P1 is tied to GND or 3v3 using the PAD1 jumper. Similarly, you can select whether P2 is tied to GND or 3v3 using the PAD2 jumper. Refer to either the application notes for more information. </p> <p></p> <p>LSM6DSV16X Pad Jumpers</p>"},{"location":"hardware_overview/#led","title":"LED","text":"<p>Let there be light! Or not. An LED on the front of each board indicates power is being provided to the board. If you don't like LEDs or you are concerned about current draw, cut the jumper highlighted below. </p> <p></p> <p></p>"},{"location":"hardware_overview/#board-outline","title":"Board Outline","text":"<p>The SparkFun 6DoF - LSM6DSV16X (Qwiic) follows the standard 1\" x 1\" convention of most of our Qwiic breakout boards. </p> <p></p> <p>SparkFun 6DoF - LSM6DSV16X (Qwiic)</p> <p>The SparkFun 6DoF Micro - LSM6DSV16X (Qwiic) measures 0.3\" x 0.75\". </p> <p></p> <p>SparkFun 6DoF Micro - LSM6DSV16X (Qwiic)</p>"},{"location":"resources_and_going_further/","title":"Resources","text":"<p>For more information, check out the resources below.</p> <p>SparkFun 6DoF LSM6DSV16X 1\"x1\" Board: </p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files</li> <li>Board Outline (PNG)</li> <li>GitHub Hardware Repo</li> <li>GitHub Arduino Library Repo</li> </ul> <p>SparkFun 6DoF LSM6DSV16X Micro Board: </p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files</li> <li>Board Outline (PNG)</li> <li>GitHub Hardware Repo</li> <li>GitHub Arduino Library Repo</li> </ul> <p>Or check out other Qwiic Sensor Tutorials:</p> SparkFun Humidity Sensor Breakout - SHTC3 (Qwiic) Hookup Guide              Qwiic Atmospheric Sensor (BME280) Hookup Guide              Qwiic TMP117 High Precision Digital Temperature Sensor Hookup Guide              Qwiic Pressure Sensor (BMP384) Hookup Guide"},{"location":"single_page/","title":"Introduction","text":"<p>The SparkFun 6DoF - LSM6DSV16X (Qwiic) is a Qwiic enabled board based on the LSM6DSV16X from STMicroelectronics. This little chip is a high-performance, low-power 6-axis IMU, featuring a 3-axis digital accelerometer and a 3-axis digital gyroscope, with a triple core for processing acceleration and angular rate data on three separate channels (user interface, OIS, and EIS) with dedicated configuration, processing, and filtering. </p> <p> Purchase from SparkFun  </p> <p></p> <p>The SparkFun 6DoF Micro- LSM6DSV16X (Qwiic) is the 1x1's mini-me, containing most of it's elder sibling's functionality in a tiny little package. </p> <p> Purchase from SparkFun  </p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> SparkFun 6DoF - LSM6DSV16X (Qwiic)SEN-21325 SparkFun 6DoF Micro- LSM6DSV16X (Qwiic) SEN-21336 SparkFun RedBoard Qwiic DEV-14743 Qwiic Cable - 100mm PRT-14427 USB 3.1 Cable A to C - 3 Foot CAB-14743"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we recommend checking out these tutorials before continuing.</p> Qwiic Connect System Accelerometer Basics I2C"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":""},{"location":"single_page/#accelerometer-lsm6dsv16x","title":"Accelerometer - LSM6DSV16X","text":"<p>The LSM6DSV16X Accelerometer from STMicroelectronics has a few different modes: </p> <ul> <li>Mode 1: Periperhal only mode - I<sup>2</sup>C or SPI</li> <li>Mode 2: Sensor hub mode - I<sup>2</sup>C or SPI with controller I2C port</li> <li>Mode 3 and 4: AUX SPI mode I<sup>2</sup>C and SPI access multi-read</li> </ul> <p></p> <p></p>"},{"location":"single_page/#mode-1","title":"Mode 1","text":"<p>This is the default \"peripheral only\" mode. This mode allows you to use either I<sup>2</sup>C or SPI. By default, I<sup>2</sup>C is enabled with an address of 0x6B. By manipulating the associated jumper, you can change the I<sup>2</sup>C address to 0x6A (cut the power side and close the ground side) or switch to SPI mode (both jumpers open).</p>"},{"location":"single_page/#mode-2","title":"Mode 2","text":"<p>This mode enables a secondary I<sup>2</sup>C port that the 6DoF controls; up to 4 external sensors can be connected to the I<sup>2</sup>C controller interface of the device. External sensors communicate via the SCX and SDX (PICOX) lines - the SCX and SDX jumpers will need to be opened.</p>"},{"location":"single_page/#modes-3-4","title":"Modes 3 &amp; 4","text":"<p>In addition to the primary I<sup>2</sup>C peripheral interface or SPI (3- / 4-wire) serial interface, an auxiliary SPI (3- / 4-wire) serial interface is available for external device connections (i.e. camera module). Mode 3 is available for gyroscope only, Mode 4 is available for both gyroscope and accelerometer.</p> <p>The analog hub and Qvar functionalities are available in mode 1 with I\u00b2C interface only.</p>"},{"location":"single_page/#qwiic-connector","title":"Qwiic Connector","text":"<p>The Qwiic connector(s) on the SparkFun 6DoF - LSM6DSV16X (Qwiic) and SparkFun 6DoF Micro - LSM6DSV16X (Qwiic) provide power and I<sup>2</sup>C connectivity simultaneously.</p> <p></p> <p></p>"},{"location":"single_page/#power","title":"Power","text":"<p>Ideally, power to these boards will be provided by the Qwiic cables. However, should you wish to provide power separately, the 1\" x 1\" board has its pins broken out to PTH and you can wire up power via these. </p> <p>Warning</p> <p><p>Make sure to pay attention to logic levels - supply voltage range should be between 1.71V - 3.6V. </p></p> <p></p> <p>LSM6DSV16X Power Pins</p>"},{"location":"single_page/#gpio","title":"GPIO","text":"<p>This is a quick overview of the pin functionality. For more information, refer to the datasheet. </p>"},{"location":"single_page/#i2c","title":"I<sup>2</sup>C","text":"<p>If you do not want to use the Qwiic connectors, I<sup>2</sup>C functionality has been broken out to PTH pins on the 1x1\" board. </p> <p></p> <p>LSM6DSV16X I2C Pins</p>"},{"location":"single_page/#spi","title":"SPI","text":"<p>Primary SPI functionality has been broken out to the highlighted pins below. </p> <p></p> <p>LSM6DSV16X SPI Pins</p> <p>Auxiliary SPI is available via AH1, AH2, and OCS. </p> <p></p> <p>LSM6DSV16X Aux SPI Pins</p>"},{"location":"single_page/#ah1ah2","title":"AH1/AH2","text":"<p>The LSM6DSV16X embeds Qvar functionality, which is an electrostatic sensor able to measure the variation of the quasi-electrostatic potential. The Qvar sensing channel can be used for user interface applications like tap, double tap, triple tap, long press, and L/R \u2013 R/L swipe. Functionality is accessed via the AH1 and AH2 pins. For more information, refer to STMicroelectronics' Qvar Sensing Channel Application Notes. </p> <p></p> <p>LSM6DSV16X Qvar Pins</p>"},{"location":"single_page/#interrupt-pins","title":"Interrupt Pins","text":"<p>Interrupt functionality is available via the INT pins. There are two interrupts available on the 1x1\" board, and 1 interrupt available on the Micro. These pins are configurable to be high or low. </p> <p></p> <p></p>"},{"location":"single_page/#jumpers","title":"Jumpers","text":""},{"location":"single_page/#i2c_1","title":"I2C","text":"<p>Like our other Qwiic boards, the Qwiic 6DoF - LSM6DSV16X boards come equipped with pull-up resistors on the clock and data pins. If you are daisy-chaining multiple Qwiic devices, you will want to cut this jumper; if multiple sensors are connected to the bus with the pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus. To disable the pull up resistors, use an X-acto knife to cut the joint between the two jumper pads highlighted below.</p> <p></p> <p></p>"},{"location":"single_page/#i2c-address","title":"I<sup>2</sup>C Address","text":"<p>The SparkFun 6DoF - LSM6DSV16X (Qwiic) boards have a default I<sup>2</sup>C address of 0x6B, but by cutting the address jumper on the back of the board, you can select 0x6A (GND) or SPI (fully open). </p> <p></p> <p></p>"},{"location":"single_page/#sdxscx","title":"SDX/SCX","text":"<p>If using either Mode 2 (sensor hub mode) or the analog capabilities of the sensor, cut both of these traces. </p> <p></p> <p>LSM6DSV16X SCX/SDX Jumpers</p>"},{"location":"single_page/#pad-jumpers","title":"Pad Jumpers","text":"<p>When using the Analog In (QVar) functionality, you can select whether P1 is tied to GND or 3v3 using the PAD1 jumper. Similarly, you can select whether P2 is tied to GND or 3v3 using the PAD2 jumper. Refer to either the application notes for more information. </p> <p></p> <p>LSM6DSV16X Pad Jumpers</p>"},{"location":"single_page/#led","title":"LED","text":"<p>Let there be light! Or not. An LED on the front of each board indicates power is being provided to the board. If you don't like LEDs or you are concerned about current draw, cut the jumper highlighted below. </p> <p></p> <p></p>"},{"location":"single_page/#board-outline","title":"Board Outline","text":"<p>The SparkFun 6DoF - LSM6DSV16X (Qwiic) follows the standard 1\" x 1\" convention of most of our Qwiic breakout boards. </p> <p></p> <p>SparkFun 6DoF - LSM6DSV16X (Qwiic)</p> <p>The SparkFun 6DoF Micro - LSM6DSV16X (Qwiic) measures 0.3\" x 0.75\". </p> <p></p> <p>SparkFun 6DoF Micro - LSM6DSV16X (Qwiic)</p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":"<p>The delightful thing about our Qwiic boards is that they are quite literally plug and play. </p> <p></p> <p>SparkFun 6DoF - LSM6DSV16X (Qwiic) Plugged into the RedBoard Qwiic</p> <p></p> <p>SparkFun 6DoF Micro - LSM6DSV16X (Qwiic)  Plugged into the RedBoard Qwiic</p> <p>Attention</p> <p>If you are using the SparkFun RedBoard Qwiic, make sure that you have your I/O jumper set correctly. You'll find the 3V3 vs 5V jumper on the front of the RedBoard Qwiic. You'll need to cut the connective trace to 5V and solder the center jumper pad to the 3V3 pad in order for the examples to work. More information can be found in the RedBoard Qwiic Hookup Guide. </p> <p> 3V3/5V Jumper on the RedBoard </p>"},{"location":"single_page/#software-setup-and-programming","title":"Software Setup and Programming","text":"<p>Attention</p> <p>If this is your first time using Arduino, please review our tutorial on installing the Arduino IDE. If you have not previously installed an Arduino library, please check out our installation guide.</p> <p>SparkFun has written a library to work with the SparkFun LSM6DSV16X Boards. You can obtain this library through the Arduino Library Manager by searching for \"LSM6DSV16X\" and installing the latest version. If you prefer downloading libraries manually, you can grab them from the GitHub Repository.</p> <p> SparkFun LSM6DSV16X Arduino Library GitHub </p>"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":""},{"location":"single_page/#example-1-basic-readings","title":"Example 1: Basic Readings","text":"<p>This first example just does some basic measurements. To find Example 1, go to File &gt; Examples &gt; SparkFun 6DoF LSM6DSV16X &gt; example1_basic:</p> <p></p> <p>Finding Example 1</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 1 Arduino Code <pre><code>/*\n  example1-basic\n\n  This example shows the basic settings and functions for retrieving accelerometer\n    and gyroscopic data.\n\n  Written by Elias Santistevan @ SparkFun Electronics, May, 2022\n\n    Products:\n\n    SparkFun 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21325\n\n    SparkFun Micro 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21336\n\n  Repository:\n        https://github.com/sparkfun/SparkFun_LSM6DSV16X_Arduino_Library\n\n  SparkFun code, firmware, and software is released under the MIT\n    License (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_LSM6DSV16X.h\"\n#include &lt;Wire.h&gt;\n\nSparkFun_LSM6DSV16X myLSM;\n\n// Structs for X,Y,Z data\nsfe_lsm_data_t accelData;\nsfe_lsm_data_t gyroData;\n\nvoid setup()\n{\n\n    Wire.begin();\n\n    Serial.begin(115200);\n    while (!Serial)\n    {\n    }\n\n    Serial.println(\"LSM6DSV16X Example 1 - Basic Readings I2C\");\n\n    if (!myLSM.begin())\n    {\n        Serial.println(\"Did not begin, check your wiring and/or I2C address!\");\n        while (1)\n            ;\n    }\n\n    // Reset the device to default settings. This if helpful is you're doing multiple\n    // uploads testing different settings.\n    myLSM.deviceReset();\n\n    // Wait for it to finish reseting\n    while (!myLSM.getDeviceReset())\n    {\n        delay(1);\n    }\n\n    Serial.println(\"Board has been Reset.\");\n    Serial.println(\"Applying settings.\");\n\n    // Accelerometer and Gyroscope registers will not be updated\n    // until read.\n    myLSM.enableBlockDataUpdate();\n\n    // Set the output data rate and precision of the accelerometer\n    myLSM.setAccelDataRate(LSM6DSV16X_ODR_AT_7Hz5);\n    myLSM.setAccelFullScale(LSM6DSV16X_16g);\n\n    // Set the output data rate and precision of the gyroscope\n    myLSM.setGyroDataRate(LSM6DSV16X_ODR_AT_15Hz);\n    myLSM.setGyroFullScale(LSM6DSV16X_2000dps);\n\n    // Enable filter settling.\n    myLSM.enableFilterSettling();\n\n    // Turn on the accelerometer's filter and apply settings.\n    myLSM.enableAccelLP2Filter();\n    myLSM.setAccelLP2Bandwidth(LSM6DSV16X_XL_STRONG);\n\n    // Turn on the gyroscope's filter and apply settings.\n    myLSM.enableGyroLP1Filter();\n    myLSM.setGyroLP1Bandwidth(LSM6DSV16X_GY_ULTRA_LIGHT);\n\n    Serial.println(\"Ready.\");\n}\n\nvoid loop()\n{\n\n    // Check if both gyroscope and accelerometer data is available.\n    if (myLSM.checkStatus())\n    {\n        myLSM.getAccel(&amp;accelData);\n        myLSM.getGyro(&amp;gyroData);\n        Serial.print(\"Accelerometer: \");\n        Serial.print(\"X: \");\n        Serial.print(accelData.xData);\n        Serial.print(\" \");\n        Serial.print(\"Y: \");\n        Serial.print(accelData.yData);\n        Serial.print(\" \");\n        Serial.print(\"Z: \");\n        Serial.print(accelData.zData);\n        Serial.println(\" \");\n        Serial.print(\"Gyroscope: \");\n        Serial.print(\"X: \");\n        Serial.print(gyroData.xData);\n        Serial.print(\" \");\n        Serial.print(\"Y: \");\n        Serial.print(gyroData.yData);\n        Serial.print(\" \");\n        Serial.print(\"Z: \");\n        Serial.print(gyroData.zData);\n        Serial.println(\" \");\n    }\n\n    delay(100);\n}\n</code></pre> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following. Note the obvious changes where the sensor was turned upright. </p> <p></p> <p>Example 1 Output</p>"},{"location":"single_page/#example-2-interrupt","title":"Example 2: Interrupt","text":"<p>This example shows the basic settings and functions for retrieving accelerometer data. In addition we're setting the data ready signal to interrupt pin one in an active high configuration and show additional ways in which the interrupts can be configured. To find Example 2, go to File &gt; Examples &gt; SparkFun 6DoF LSM6DSV16X &gt; example2_interrupt. </p> <p></p> <p>Finding Example 2</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 2 Arduino Code <pre><code>/*\n  example2-interrupt\n\n  This example shows the basic settings and functions for retrieving accelerometer\n    data. In addition we're setting the data ready signal to interrupt pin one in an\n    active high configuration and show additional ways in which the interrupts\n    can be configured.\n\n  Written by Elias Santistevan @ SparkFun Electronics, May 2022\n\n    Products:\n\n    SparkFun 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21325\n\n    SparkFun Micro 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21336\n\n  Repository:\n        https://github.com/sparkfun/SparkFun_LSM6DSV16X_Arduino_Library\n\n  SparkFun code, firmware, and software is released under the MIT\n    License (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_LSM6DSV16X.h\"\n#include &lt;Wire.h&gt;\n\n// Structs for X,Y,Z data\nSparkFun_LSM6DSV16X myLSM;\n\n// Structs for X,Y,Z data\nsfe_lsm_data_t accelData;\n\n// Interrupt pin\nbyte interrupt_pin = 10;\n\nvoid setup()\n{\n\n    // Set the interrupt to INPUT\n    pinMode(interrupt_pin, INPUT);\n\n    Serial.begin(115200);\n    while (!Serial)\n    {\n    }\n\n    Serial.println(\"LSM6DSV16X Example 2 - Interrupts\");\n\n    Wire.begin();\n\n    if (!myLSM.begin())\n    {\n        Serial.println(\"Did not begin, check your wiring and/or I2C address!\");\n        while (1)\n            ;\n    }\n\n    // Reset the device to default settings. This is helpful if you're doing multiple\n    // uploads testing different settings.\n    myLSM.deviceReset();\n\n    // Wait for it to finish reseting\n    while (!myLSM.getDeviceReset())\n    {\n        delay(1);\n    }\n\n    Serial.println(\"Board has been Reset.\");\n    Serial.println(\"Applying settings.\");\n\n    // Accelerometer and Gyroscope registers will not be updated\n    // until read.\n    myLSM.enableBlockDataUpdate();\n\n    // Set the output data rate and precision of the accelerometer\n    myLSM.setAccelDataRate(LSM6DSV16X_ODR_AT_7Hz5);\n    myLSM.setAccelFullScale(LSM6DSV16X_16g);\n\n    // Turn on the accelerometer's filter and apply settings.\n    myLSM.enableAccelLP2Filter();\n    myLSM.setAccelLP2Bandwidth(LSM6DSV16X_XL_STRONG);\n\n    // Set the accelerometer's status i.e. the data ready to interrupt one.\n    // Commented out just below is the function to send the data ready\n    // to interrupt two.\n\n    myLSM.setIntAccelDataReady(LSM_PIN_ONE);\n    // myLSM.setIntAccelDataReady(LSM_PIN_TWO);\n\n    // We can just as easily set the gyroscope's data read signal to either interrupt\n\n    // myLSM.setIntGyroDataReady(LSM_PIN_ONE);\n    // myLSM.setIntGyroDataReady(LSM_PIN_TWO);\n\n    // Uncommenting the function call below will change interrupt TWO\n    // active LOW instead of HIGH.\n\n    // myLSM.setInt2DENActiveLow();\n\n    // This function call will modify which \"events\" trigger an interrupt. No\n    // argument has been given, please refer to the datasheet for more\n    // information.\n\n    // Possible values for routing your interrupt include:\n    // lsm6dsv16x_pin_int_route_t routeInt;\n    // routeInt.drdy_xl = 1;\n    // routeInt.drdy_g = 1;\n    // routeInt.drdy_g = 1;\n    // routeInt.single_tap = 1;\n    // routeInt.double_tap = 1;\n    // myLSM.setIntRoute(routeInt, LSM_PIN_ONE);\n\n    // This function changes the latching behaviour of the interrupts to pulsed.\n    // lsm6dsv16x_data_ready_mode_t mode = LSM6DSV16X_DRDY_PULSED;\n    // myLSM.setDataReadyMode();\n\n    Serial.println(\"Ready.\");\n}\n\nvoid loop()\n{\n\n    if (digitalRead(interrupt_pin) == HIGH)\n    {\n        myLSM.getAccel(&amp;accelData);\n        Serial.print(\"Accelerometer: \");\n        Serial.print(\"X: \");\n        Serial.print(accelData.xData);\n        Serial.print(\" \");\n        Serial.print(\"Y: \");\n        Serial.print(accelData.yData);\n        Serial.print(\" \");\n        Serial.print(\"Z: \");\n        Serial.print(accelData.zData);\n        Serial.println(\" \");\n    }\n\n    delay(100);\n}\n</code></pre> <p>Your setup should resemble something like this: </p> <p></p> <p>Example 2</p> <p>Make sure your code matches the pin you've selected as the interrupt pin. Here Pin 2 is wired as the interrupt pin on the RedBoard, so the code was modified to reflect that. Again, make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following.</p> <p></p> <p>Example 2 Output</p>"},{"location":"single_page/#example-3-spi","title":"Example 3: SPI","text":"<p>This example shows the basic settings and functions for retrieving accelerometer and gyroscopic data but using the SPI interface. Everything other than that is identical to the \"basic\" example. To find Example 3, go to File &gt; Examples &gt; SparkFun 6DoF LSM6DSV16X &gt; example3_spi:</p> <p></p> <p>Finding Example 3</p> <p>Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 3 Arduino Code <pre><code>/*\n  example3-spi\n\n  This example shows the basic settings and functions for retrieving accelerometer\n    and gyroscopic data but using the SPI interface. Everything other than that is\n    identical to the \"basic\" example.\n\n  Written by Elias Santistevan @ SparkFun Electronics, May 2022\n\n    Products:\n\n    SparkFun 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21325\n\n    SparkFun Micro 6DoF LSM6DSV16X (Qwiic):\n        https://www.sparkfun.com/products/21336\n\n  Repository:\n        https://github.com/sparkfun/SparkFun_LSM6DSV16X_Arduino_Library\n\n  SparkFun code, firmware, and software is released under the MIT\n    License (http://opensource.org/licenses/MIT).\n*/\n\n#include \"SparkFun_LSM6DSV16X.h\"\n#include &lt;SPI.h&gt;\n\n// SPI instance class call\nSparkFun_LSM6DSV16X_SPI myLSM;\n\n// Structs for X,Y,Z data\nsfe_lsm_data_t accelData;\nsfe_lsm_data_t gyroData;\n\n// Set your chip select pin according to your setup.\nint chipSelect = 10;\n\nvoid setup()\n{\n\n    SPI.begin();\n\n    Serial.begin(115200);\n    while (!Serial)\n    {\n    }\n\n    Serial.println(\"LSM6DSV16X Example 3 - Basic Readings SPI\");\n\n    pinMode(chipSelect, OUTPUT);\n    digitalWrite(chipSelect, HIGH);\n\n    if (!myLSM.begin(chipSelect))\n    {\n        Serial.println(\"Did not begin, check your wiring and/or I2C address!\");\n        while (1)\n            ;\n    }\n\n    // Reset the device to default settings. This if helpful is you're doing multiple\n    // uploads testing different settings.\n    myLSM.deviceReset();\n\n    // Wait for it to finish reseting\n    while (!myLSM.getDeviceReset())\n    {\n        delay(1);\n    }\n\n    Serial.println(\"Board has been Reset.\");\n    Serial.println(\"Applying settings.\");\n\n    // Accelerometer and Gyroscope registers will not be updated\n    // until read.\n    myLSM.enableBlockDataUpdate();\n\n    // Set the output data rate and precision of the accelerometer\n    myLSM.setAccelDataRate(LSM6DSV16X_ODR_AT_7Hz5);\n    myLSM.setAccelFullScale(LSM6DSV16X_16g);\n\n    // Set the output data rate and precision of the gyroscope\n    myLSM.setGyroDataRate(LSM6DSV16X_ODR_AT_15Hz);\n    myLSM.setGyroFullScale(LSM6DSV16X_2000dps);\n\n    // Enable filter settling.\n    myLSM.enableFilterSettling();\n\n    // Turn on the accelerometer's filter and apply settings.\n    myLSM.enableAccelLP2Filter();\n    myLSM.setAccelLP2Bandwidth(LSM6DSV16X_XL_STRONG);\n\n    // Turn on the gyroscope's filter and apply settings.\n    myLSM.enableGyroLP1Filter();\n    myLSM.setGyroLP1Bandwidth(LSM6DSV16X_GY_ULTRA_LIGHT);\n\n    Serial.print(\"Ready.\");\n}\n\nvoid loop()\n{\n\n    // Check if both gyroscope and accelerometer data is available.\n    if (myLSM.checkStatus())\n    {\n        myLSM.getAccel(&amp;accelData);\n        myLSM.getGyro(&amp;gyroData);\n        Serial.print(\"Accelerometer: \");\n        Serial.print(\"X: \");\n        Serial.print(accelData.xData);\n        Serial.print(\" \");\n        Serial.print(\"Y: \");\n        Serial.print(accelData.yData);\n        Serial.print(\" \");\n        Serial.print(\"Z: \");\n        Serial.print(accelData.zData);\n        Serial.println(\" \");\n        Serial.print(\"Gyroscope: \");\n        Serial.print(\"X: \");\n        Serial.print(gyroData.xData);\n        Serial.print(\" \");\n        Serial.print(\"Y: \");\n        Serial.print(gyroData.yData);\n        Serial.print(\" \");\n        Serial.print(\"Z: \");\n        Serial.print(gyroData.zData);\n        Serial.println(\" \");\n    }\n\n    delay(100);\n}\n</code></pre> <p>The wiring for this example is fairly straight forward, if somewhat ugly. Here's what it looks like:</p> <p></p> <p>Example 3</p> <p>And here are the connections:  Pin Connections Qwiic Breakout Pin RedBoard Pin PICO 11 POCI 12 SCLK 13 CS A4 <p></p> <p>Once you get the correct port and board selected and the code is uploaded, you should see something like the following: </p> <p></p> <p>Example 3 Output</p> <p>Attention</p> <p>If you are using the SparkFun RedBoard Qwiic and your output only says \"Reset. Applying Settings.\" with no other output, make sure that you have your I/O jumper set correctly. You'll find the 3V3 vs 5V jumper on the front of the RedBoard Qwiic. You'll need to cut the connective trace to 5V and solder the center jumper pad to the 3V3 pad. More information can be found in the RedBoard Qwiic Hookup Guide. </p> <p> 3V3/5V Jumper on the RedBoard </p>"},{"location":"single_page/#further-examples","title":"Further Examples","text":"<p>There are a few more examples in the library that get you started with I<sup>2</sup>C speeds, Qvar, and single/double tap. Feel free to explore and play with these examples to maximize your use of the SparkFun 6DoF - LSM6DSV16X (Qwiic) or  SparkFun Micro 6DoF - LSM6DSV16X (Qwiic)!</p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources:","text":""},{"location":"software_setup_and_programming/","title":"Software Setup and Programming","text":"<p>Attention</p> <p>If this is your first time using Arduino, please review our tutorial on installing the Arduino IDE. If you have not previously installed an Arduino library, please check out our installation guide.</p> <p>SparkFun has written a library to work with the SparkFun LSM6DSV16X Boards. You can obtain this library through the Arduino Library Manager by searching for \"LSM6DSV16X\" and installing the latest version. If you prefer downloading libraries manually, you can grab them from the GitHub Repository.</p> <p> SparkFun LSM6DSV16X Arduino Library GitHub </p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"}]}